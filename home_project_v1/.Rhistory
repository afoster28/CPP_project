library(rpart)
data=kyphosis
# number of observations
nrow(data)
# columns
colnames(data)
# first 10 rows
data[1:10,]
fit=rpart(Kyphosis ~ Age + Number + Start,method="class",data)
par(mfrow=c(1,1), xpd=NA)
plot(fit, uniform=TRUE, main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
post(fit,file="",title="Classification Tree for Kyphosis")
#function deriving 2x2 matrix
getData=function(data,colInd,boundaryVal){
M=matrix(ncol=2,nrow=2,NA)
M[1,1]=nrow(data[v<-which(data[,colInd]<boundaryVal),][which(data[v,1]=="present"),])
M[1,2]=nrow(data[v<-which(data[,colInd]<boundaryVal),][which(data[v,1]=="absent"),])
M[2,1]=nrow(data[v<-which(data[,colInd]>=boundaryVal),][which(data[v,1]=="present"),])
M[2,2]=nrow(data[v<-which(data[,colInd]>=boundaryVal),][which(data[v,1]=="absent"),])
colnames(M)=c("BAD","GOOD")
rownames(M)=c("LEFT SON","RIGHT SON")
M
}
# age < 15
getData(data,2,15)
# age < 60
getData(data,2,60)
# start < 7
getData(data,4,7)
type(data)
class(data)
class(getData(data,2,15))
aa = getData(data,2,15)
aa[1,1]
aa[1,2]
redImp.Gini <- function(M){
I.A <- 1 - (sum(M[,1]) / sum(M))^2 - (sum(M[,2]) / sum(M))^2
I.AL <- 1 - ((M[1,1] / sum(M[1,]))^2 + (M[1,2] / sum(M[1,]))^2)
I.AR <- 1 - ((M[2,1] / sum(M[2,]))^2 + (M[2,2] / sum(M[2,]))^2)
weight_AL <- sum(M[1,]) / sum(M)
weight_AR <- sum(M[2,]) / sum(M)
reduction <- I.A - weight_AL * I.AL - weight_AR * I.AR
return(reduction)
}
# Example usage with getData function
# Assuming getData is defined and data is loaded appropriately
redImp.Gini(getData(data, 2, 15))
redImp.Gini(getData(data, 2, 60))
redImp.Gini(getData(data, 4, 7))
redImp.Gini <- function(M){
I.A <- 1 - (sum(M[,1]) / sum(M))^2 - (sum(M[,2]) / sum(M))^2
I.AL <- 1 - ((M[1,1] / sum(M[1,]))^2 + (M[1,2] / sum(M[1,]))^2)
I.AR <- 1 - ((M[2,1] / sum(M[2,]))^2 + (M[2,2] / sum(M[2,]))^2)
weight_AL <- sum(M[1,]) / sum(M)
weight_AR <- sum(M[2,]) / sum(M)
reduction <- I.A - weight_AL * I.AL - weight_AR * I.AR
return(reduction)
}
# Example usage with getData function
# Assuming getData is defined and data is loaded appropriately
redImp.Gini(getData(data, 2, 15))
redImp.Gini(getData(data, 2, 60))
redImp.Gini(getData(data, 4, 7))
chisq.test(getData(data,2,15),correct=F)
suppressWarnings(chisq.test(getData(data,2,15),correct=F))
suppressWarnings(chisq.test(getData(data,2,15),correct=F)$p.value)
suppressWarnings(chisq.test(getData(data,2,60),correct=F)$p.value)
suppressWarnings(chisq.test(getData(data,4,7),correct=F)$p.value)
getOptimalSplitRedImp=function(data,colInd,step){
vec=sort(unique(data[,colInd]))
v=seq(from=min(vec[-c(1,length(vec))]), to = max(vec[-c(1,length(vec))]),by=step)
RES<-matrix(rep(NA,2*length(v)),ncol=2)
for (i in 1:length(v)){
RES[i,1]<-v[i]
RES[i,2]<-redImp.Gini(getData(data,colInd,v[i]))
}
maxVal=max(RES[,2])
medPosition=median(which(RES[,2]==maxVal))
plot(RES[,2], cex=0.4)
lines(RES[,2], lty="dashed")
abline(v=which(RES[,2]==max(RES[,2])),lty="dashed",col="grey")
abline(v=medPosition,lty="dashed",col="red")
#RES
RES[medPosition,]
}
options(scipen=999)
getOptimalSplitRedImp(data,2,1)
getOptimalSplitRedImp(data,2,0.5)
getOptimalSplitRedImp(data,2,0.1)
getOptimalSplitRedImp(data,3,1)
getOptimalSplitRedImp(data,3,0.5)
getOptimalSplitRedImp(data,3,0.1)
getOptimalSplitRedImp(data,4,1)
getOptimalSplitRedImp(data,4,0.5)
getOptimalSplitRedImp(data,4,0.1)
options(scipen=0)
options(scipen=999)
getOptimalSplitRedImp(data,2,1)
getOptimalSplitRedImp(data,2,0.5)
getOptimalSplitRedImp(data,2,0.1)
getOptimalSplitRedImp(data,3,1)
getOptimalSplitRedImp(data,3,0.5)
getOptimalSplitRedImp(data,3,0.1)
getOptimalSplitRedImp(data,4,1)
getOptimalSplitRedImp(data,4,0.5)
getOptimalSplitRedImp(data,4,0.1)
options(scipen=0)
#so the best split is with "start"=8.5
#let's check whether as a result we obtain pure nodes
getData(data,4,8.5)
# after selection of best predictors, finding best splits (boundary values) we can obtain following trees
# they differ with respect to complexity (division depth of the population)
dataKyph=kyphosis
# let's compare it with rpart.
fit=rpart(Kyphosis ~ Age + Number + Start,method="class",dataKyph)
fit2=rpart(Kyphosis ~ Age + Number + Start,method="class",dataKyph,control=rpart.control(minsplit=1))
par(mfrow=c(1,2), xpd=NA)
plot(fit, uniform=TRUE, main="Classification Tree for Kyphosis")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
plot(fit2, uniform=TRUE, main="Classification Tree for Kyphosis")
text(fit2, use.n=TRUE, all=TRUE, cex=.8)
#example with loss matrix
lmat <- matrix(c(0,4,1,0), nrow=2, ncol=2, byrow=F)
fit=rpart(Kyphosis ~ Age + Number + Start,method="class",dataKyph)
fit2 = rpart(Kyphosis ~ Age + Number + Start,method="class",data=dataKyph,parms=list(loss=lmat))
par(mfrow=c(1,2), xpd=NA)
post(fit,file="",title="Classification Tree for Kyphosis")
post(fit2,file="",title="Classification Tree for Kyphosis")
options(scipen=999)
getOptimalSplitRedImp(data,2,1)
getOptimalSplitRedImp(data,2,0.5)
getOptimalSplitRedImp(data,2,0.1)
getOptimalSplitRedImp(data,3,1)
getOptimalSplitRedImp(data,3,0.5)
getOptimalSplitRedImp(data,3,0.1)
getOptimalSplitRedImp(data,4,1)
getOptimalSplitRedImp(data,4,0.5)
getOptimalSplitRedImp(data,4,0.1)
options(scipen=0)
getOptimalSplitRedImp=function(data,colInd,step){
vec=sort(unique(data[,colInd]))
v=seq(from=min(vec[-c(1,length(vec))]), to = max(vec[-c(1,length(vec))]),by=step)
RES<-matrix(rep(NA,2*length(v)),ncol=2)
for (i in 1:length(v)){
RES[i,1]<-v[i]
RES[i,2]<-redImp.Gini(getData(data,colInd,v[i]))
}
maxVal=max(RES[,2])
medPosition=median(which(RES[,2]==maxVal))
plot(RES[,2], cex=0.4)
lines(RES[,2], lty="dashed")
abline(v=which(RES[,2]==max(RES[,2])),lty="dashed",col="grey")
abline(v=medPosition,lty="dashed",col="red")
#RES
RES[medPosition,]
}
options(scipen=999)
getOptimalSplitRedImp(data,2,1)
getOptimalSplitRedImp(data,2,0.5)
getOptimalSplitRedImp(data,2,0.1)
chisq.test(getData(data,2,15),correct=F)
suppressWarnings(chisq.test(getData(data,2,15),correct=F))
suppressWarnings(chisq.test(getData(data,2,15),correct=F)$p.value)
suppressWarnings(chisq.test(getData(data,2,60),correct=F)$p.value)
suppressWarnings(chisq.test(getData(data,4,7),correct=F)$p.value)
getOptimalSplitRedImp=function(data,colInd,step){
vec=sort(unique(data[,colInd]))
v=seq(from=min(vec[-c(1,length(vec))]), to = max(vec[-c(1,length(vec))]),by=step)
RES<-matrix(rep(NA,2*length(v)),ncol=2)
for (i in 1:length(v)){
RES[i,1]<-v[i]
RES[i,2]<-redImp.Gini(getData(data,colInd,v[i]))
}
maxVal=max(RES[,2])
medPosition=median(which(RES[,2]==maxVal))
plot(RES[,2], cex=0.4)
lines(RES[,2], lty="dashed")
abline(v=which(RES[,2]==max(RES[,2])),lty="dashed",col="grey")
abline(v=medPosition,lty="dashed",col="red")
#RES
RES[medPosition,]
}
options(scipen=999)
getOptimalSplitRedImp(data,2,1)
getOptimalSplitRedImp(data,2,0.5)
getOptimalSplitRedImp(data,2,0.1)
chisq.test(getData(data,2,15),correct=F)
suppressWarnings(chisq.test(getData(data,2,15),correct=F))
suppressWarnings(chisq.test(getData(data,2,15),correct=F)$p.value)
suppressWarnings(chisq.test(getData(data,2,60),correct=F)$p.value)
suppressWarnings(chisq.test(getData(data,4,7),correct=F)$p.value)
getOptimalSplitRedImp=function(data,colInd,step){
vec=sort(unique(data[,colInd]))
v=seq(from=min(vec[-c(1,length(vec))]), to = max(vec[-c(1,length(vec))]),by=step)
RES<-matrix(rep(NA,2*length(v)),ncol=2)
for (i in 1:length(v)){
RES[i,1]<-v[i]
RES[i,2]<-redImp.Gini(getData(data,colInd,v[i]))
}
maxVal=max(RES[,2])
medPosition=median(which(RES[,2]==maxVal))
plot(RES[,2], cex=0.4)
lines(RES[,2], lty="dashed")
abline(v=which(RES[,2]==max(RES[,2])),lty="dashed",col="grey")
abline(v=medPosition,lty="dashed",col="red")
#RES
RES[medPosition,]
}
options(scipen=999)
getOptimalSplitRedImp(data,2,1)
getOptimalSplitRedImp(data,2,0.5)
getOptimalSplitRedImp(data,2,0.1)
getOptimalSplitRedImp(data,3,1)
getOptimalSplitRedImp(data,3,0.5)
getOptimalSplitRedImp(data,3,0.1)
getOptimalSplitRedImp(data,4,1)
getOptimalSplitRedImp(data,4,0.5)
getOptimalSplitRedImp(data,4,0.1)
options(scipen=0)
hello <- function() {
print("Hello, world!")
}
library(Rcpp)
sourceCpp("RandomMain3.cpp")
sourceCpp("src/RandomMain3.cpp")
sourceCpp("./src/RandomMain3.cpp")
price = MCEuropeanOptionPricer()
price
price = MCEuropeanOptionPricer()
price
price = MCEuropeanOptionPricer()
price
sourceCpp("./src/RandomMain3.cpp")
sourceCpp("./src/RandomMain3.cpp")
price = MCEuropeanOptionPricer()
price
sourceCpp("./src/RandomMain3.cpp")
sourceCpp("./src/RandomMain3.cpp")
sourceCpp("./src/RandomMain3.cpp")
sourceCpp("./src/RandomMain3.cpp")
price = MCEuropeanOptionPricer()
library(Rcpp)
sourceCpp("./src/RandomMain3.cpp")
library(Rcpp)
sourceCpp("./src/RandomMain3.cpp")
price = MCEuropeanOptionPricer()
library(Rcpp)
sourceCpp("./src/RandomMain3.cpp")
price = MCEuropeanOptionPricer()
hello <- function() {
print("Hello, world!")
}
library(Rcpp)
sourceCpp("./src/RandomMain3.cpp")
price = MCEuropeanOptionPricer()
library(Rcpp)
sourceCpp("./src/RandomMain3.cpp")
price
library(Rcpp)
sourceCpp("./src/RandomMain3.cpp")
price = MCEuropeanOptionPricer()
price
library(Rcpp)
sourceCpp("./src/RandomMain3.cpp")
price = MCEuropeanOptionPricer()
price
library(Rcpp)
sourceCpp("./src/RandomMain3.cpp")
library(Rcpp)
sourceCpp("./src/RandomMain3.cpp")
price = MCEuropeanOptionPricer()
price
library(Rcpp)
sourceCpp("./src/RandomMain3.cpp")
library(Rcpp)
sourceCpp("./src/RandomMain3.cpp")
price = MCEuropeanOptionPricer()
price
library(Rcpp)
sourceCpp("./src/RandomMain3.cpp")
price = MCEuropeanOptionPricer()
price
library(Rcpp)
sourceCpp("./src/RandomMain3.cpp")
price = MCEuropeanOptionPricer()
price
sourceCpp("./src/RandomMain3.cpp")
price = MCEuropeanOptionPricer()
price
sourceCpp("./src/RandomMain3.cpp")
price = MCEuropeanOptionPricer()
price
sourceCpp("./src/RandomMain3.cpp")
price = MCEuropeanOptionPricer()
price
sourceCpp("./src/RandomMain3.cpp")
price = MCEuropeanOptionPricer()
price
library(Rcpp)
sourceCpp("./src/RandomMain3.cpp")
price = MCEuropeanOptionPricer()
price
library(Rcpp)
sourceCpp("./src/RandomMain3.cpp")
price = MCEuropeanOptionPricer()
price
