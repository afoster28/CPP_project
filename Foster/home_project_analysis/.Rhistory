library(tidyverse)
library(ggplot2)
# 1. remove package if it exists
remove.packages("OptionPricer")
detach("package:OptionPricer", unload = TRUE)
# 2. install package and load to memory
# or from source (rebuilt automatically)
install.packages("../OptionPricer_0.1.0.tar.gz",
type = "source",
repos = NULL)
library(ggplot2)
library(gridExtra)
library(tibble)
# Remove package if it exists
remove.packages("OptionPricer")
detach("package:OptionPricer", unload = TRUE)
# Install package and load to memory - ensure package path is correct
install.packages("../OptionPricer_0.1.0.tar.gz",
type = "source",
repos = NULL)
library("OptionPricer")
# Call the function and calculate stats
MCEuropeanCall <- function(antithetic) {
prices <- rep(NA, 1000)
for (i in 1:length(prices)) {
cat(i, "\n")
prices[i] <-
MCEuropeanOptionPricer("C", 0.5, 100, 95, 0.2, 0.06, antithetic, 10000, i)
}
meanPrices <- mean(prices)
stdPrices <- sd(prices)
plotPrices <- tibble(prices = prices) %>%
ggplot(aes(prices)) +
geom_histogram(col = "black", fill = "pink", bins = 25) +
ggtitle(paste("Prices: Antithetic Variates", antithetic))
cat("Stats calculated\n")
return(list(meanPrices = meanPrices, stdPrices = stdPrices, plotPrices = plotPrices))
}
prices <- MCEuropeanCall(FALSE)
pricesAntithetic <- MCEuropeanCall(TRUE)
cat(paste("Mean of prices without antithetic variates:", prices$meanPrices, "\n"))
cat(paste("Mean of prices with antithetic variates:", pricesAntithetic$meanPrices, "\n"))
cat(paste("Std of prices without antithetic variates:", prices$stdPrices, "\n"))
cat(paste("Std of prices with antithetic variates:", pricesAntithetic$stdPrices, "\n"))
grid.arrange(prices$plotPrices, pricesAntithetic$plotPrices, ncol = 2)
(pricesAntithetic$stdPrices - prices$stdPrices) / prices$stdPrices
100 * (pricesAntithetic$stdPrices - prices$stdPrices) / prices$stdPrices
round(100 * (pricesAntithetic$stdPrices - prices$stdPrices) / prices$stdPrices)
round(100 * (pricesAntithetic$stdPrices - prices$stdPrices) / prices$stdPrices, digits = 3)
round(100 * (pricesAntithetic$stdPrices - prices$stdPrices) / prices$stdPrices, digits = 2)
round(-100 * (pricesAntithetic$stdPrices - prices$stdPrices) / prices$stdPrices, digits = 2)
cat(paste("Mean of prices without antithetic variates:", round(prices$meanPrices, digits = 4), "\n"))
cat("Variance has been reduced with antithetic variates from", round(prices$stdPrices, digits = 4),
"to", round(pricesAntithetic$stdPrices, digits = 4), "; the",
round(-100 * (pricesAntithetic$stdPrices - prices$stdPrices) / prices$stdPrices, digits = 2),
"% decrease is expected as antithetic variates provide antithetic equivalents of random variables,
generating negative covariance and reducing overall variance", "\n")
library(ggplot2)
library(gridExtra)
library(tibble)
# Remove package if it exists
remove.packages("OptionPricer")
detach("package:OptionPricer", unload = TRUE)
# Install package and load to memory - ensure package path is correct
install.packages("../OptionPricer_0.1.0.tar.gz",
type = "source",
repos = NULL)
library("OptionPricer")
# Call the function and calculate stats
MCEuropeanCall <- function(antithetic) {
prices <- rep(NA, 1000)
for (i in 1:length(prices)) {
cat(i, "\n")
prices[i] <-
MCEuropeanOptionPricer("C", 0.5, 100, 95, 0.2, 0.06, antithetic, 10000, i)
}
meanPrices <- mean(prices)
stdPrices <- sd(prices)
plotPrices <- tibble(prices = prices) %>%
ggplot(aes(prices)) +
geom_histogram(col = "black", fill = "pink", bins = 25) +
ggtitle(paste("Prices: Antithetic Variates", antithetic))
cat("Stats calculated\n")
return(list(meanPrices = meanPrices, stdPrices = stdPrices, plotPrices = plotPrices))
}
prices <- MCEuropeanCall(FALSE)
pricesAntithetic <- MCEuropeanCall(TRUE)
cat(paste("Mean of prices without antithetic variates:", round(prices$meanPrices, digits = 4), "\n"))
cat(paste("Mean of prices with antithetic variates:", round(pricesAntithetic$meanPrices, digits = 4), "\n"))
cat(paste("Std of prices without antithetic variates:", round(prices$stdPrices, digits = 4), "\n"))
cat(paste("Std of prices with antithetic variates:", round(pricesAntithetic$stdPrices, digits = 4), "\n"))
grid.arrange(prices$plotPrices, pricesAntithetic$plotPrices, ncol = 2)
cat("Variance has been reduced with antithetic variates from", round(prices$stdPrices, digits = 4),
"to", round(pricesAntithetic$stdPrices, digits = 4), "; the",
round(-100 * (pricesAntithetic$stdPrices - prices$stdPrices) / prices$stdPrices, digits = 2),
"% decrease is expected as antithetic variates provide antithetic equivalents of random variables,
generating negative covariance and reducing overall variance", "\n")
library(ggplot2)
library(gridExtra)
library(tibble)
# Remove package if it exists
remove.packages("OptionPricer")
detach("package:OptionPricer", unload = TRUE)
# Install package and load to memory - ensure package path is correct
install.packages("../OptionPricer_0.1.0.tar.gz",
type = "source",
repos = NULL)
library("OptionPricer")
# Call the function and calculate stats
MCEuropeanCall <- function(antithetic) {
prices <- rep(NA, 1000)
for (i in 1:length(prices)) {
cat(i, "\n")
prices[i] <-
MCEuropeanOptionPricer("C", 0.5, 100, 95, 0.2, 0.06, antithetic, 10000, i)
}
meanPrices <- mean(prices)
stdPrices <- sd(prices)
plotPrices <- tibble(prices = prices) %>%
ggplot(aes(prices)) +
geom_histogram(col = "black", fill = "pink", bins = 25) +
ggtitle(paste("Prices: Antithetic Variates", antithetic))
cat("Stats calculated\n")
return(list(meanPrices = meanPrices, stdPrices = stdPrices, plotPrices = plotPrices))
}
prices <- MCEuropeanCall(FALSE)
pricesAntithetic <- MCEuropeanCall(TRUE)
cat(paste("Mean of prices without antithetic variates:", round(prices$meanPrices, digits = 4), "\n"))
cat(paste("Mean of prices with antithetic variates:", round(pricesAntithetic$meanPrices, digits = 4), "\n"))
cat(paste("Std of prices without antithetic variates:", round(prices$stdPrices, digits = 4), "\n"))
cat(paste("Std of prices with antithetic variates:", round(pricesAntithetic$stdPrices, digits = 4), "\n"))
grid.arrange(prices$plotPrices, pricesAntithetic$plotPrices, ncol = 2)
cat("Variance has been reduced with antithetic variates from", round(prices$stdPrices, digits = 4),
"to", round(pricesAntithetic$stdPrices, digits = 4), "; the",
round(-100 * (pricesAntithetic$stdPrices - prices$stdPrices) / prices$stdPrices, digits = 2),
"% decrease is expected as antithetic variates provide antithetic equivalents of random variables,
generating negative covariance and reducing overall variance", "\n")
library(ggplot2)
library(gridExtra)
library(tibble)
# Remove package if it exists
remove.packages("OptionPricer")
detach("package:OptionPricer", unload = TRUE)
# Install package and load to memory - ensure package path is correct
install.packages("../OptionPricer_0.1.0.tar.gz",
type = "source",
repos = NULL)
# Remove package if it exists
remove.packages("OptionPricer")
detach("package:OptionPricer", unload = TRUE)
# Install package and load to memory - ensure package path is correct
install.packages("../OptionPricer_0.1.0.tar.gz",
type = "source",
repos = NULL)
# Remove package if it exists
remove.packages("OptionPricer")
detach("package:OptionPricer", unload = TRUE)
# Install package and load to memory - ensure package path is correct
install.packages("../OptionPricer_0.1.0.tar.gz",
type = "source",
repos = NULL)
library("OptionPricer")
# Call the function and calculate stats
MCAsianBarrierPortfolioPricer()
# Call the function and calculate stats
MCAsianBarrierPortfolioPricer(5.0 / 12.0, 115, 0.25, 0.05, 0.0, 1000000, 126, 0.8)
# Remove package if it exists
remove.packages("OptionPricer")
detach("package:OptionPricer", unload = TRUE)
# Install package and load to memory - ensure package path is correct
install.packages("../OptionPricer_0.1.0.tar.gz",
type = "source",
repos = NULL)
# Remove package if it exists
remove.packages("OptionPricer")
detach("package:OptionPricer", unload = TRUE)
# Install package and load to memory - ensure package path is correct
install.packages("../OptionPricer_0.1.0.tar.gz",
type = "source",
repos = NULL)
library(gridExtra)
library(tibble)
library(dplyr)
library(plotly)
# Remove package if it exists
remove.packages("OptionPricer")
detach("package:OptionPricer", unload = TRUE)
# Install package and load to memory - ensure package path is correct
install.packages("../OptionPricer_0.1.0.tar.gz",
type = "source",
repos = NULL)
library("OptionPricer")
# Call the function using the parameters provided
priceStart <- MCAsianBarrierPortfolioPricer(5.0 / 12.0, 115, 0.25, 0.05, 0.0, 1000000, 126, 0.8 * 115)
priceStart
# Price the portfolio under multiple combinations of spot prices and barriers
MCAsianBarrierPortfolioPricerWrapper <- function(spot, barrier) {
return(MCAsianBarrierPortfolioPricer(5.0 / 12.0, spot, 0.25, 0.05, 0.0, 1000000, 126, barrier))
}
spots <- seq(100, 130, by = 5) # equidistant range around current spot
barriers <- seq(85, 115, by = 5) # several possibilities up to spot
outSize <- length(spots) * length(barriers)
spotOut <- numeric(outSize)
barrierOut <- numeric(outSize)
priceOut <- numeric(outSize)
i <- 1
for (spot in spots) {
for (barrier in barriers) {
spotOut[i] <- spot
barrierOut[i] <- barrier
priceOut[i] <- MCAsianBarrierPortfolioPricerWrapper(spot, barrier)
cat(paste("Finished pricing ", i, "/", outSize, " portfolios\n"))
i <- i + 1
}
}
spotOut[23]
barrierOut[23]
priceOut[23] # verify price based on similar parameters is close starting price calculated earlier
# Visualise portfolio prices under the multiple spot-barrier combinations
priceMatrix <- matrix(priceOut, nrow = length(barriers), ncol = length(spots), byrow = TRUE)
axx <- list(
title = "Spot"
)
axy <- list(
title = "Barrier"
)
axz <- list(
title = "Price"
)
priceFig <- plot_ly(
x = ~spots,
y = ~barriers,
z = ~t(priceMatrix),
type = "surface",
colorscale = 'Viridis',
colorbar = list(title = "Price")
)
priceFig <- priceFig %>% layout(scene = list(xaxis = axx, yaxis = axy, zaxis = axz))
priceFig
